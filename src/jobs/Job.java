package jobs;


import org.apache.log4j.Logger;

import java.io.*;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Job: This is class for Job. It contains Job's binary code, and can be serialized.
 */
public abstract class Job implements Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 6212756222960044811L;

//    private JobResult jobResult;

    protected String fileName;
    protected byte[] binaryCode;
    protected Integer jobSize;
    protected boolean loadedToMemory;
    public boolean isRequest;
    private AtomicBoolean hasNotified;

    private static Integer MAX_JOB_SIZE = 65536;

    private UUID jobId;

    private static Logger logger = Logger.getLogger(Job.class);

    private Job() {
        this("null");
    }

    public Job(String fileName) {
        this.fileName = fileName;
        jobId = UUID.randomUUID();
//        jobResult = new JobResult();
        binaryCode = new byte[MAX_JOB_SIZE];
        loadedToMemory = false;
        isRequest = false;
        hasNotified = new AtomicBoolean(false);
    }
    
    public Job(boolean isRequest){
    	this("null");
    	this.isRequest = isRequest;
    }

    /**
     * This function returns the original file name for job
     * @return The original file name for job
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * This function returns the new file name for job. That file is generated by program.
     * This name is used to distinguish the jobs with the same file name from different nodes.
     * @return The new file name for job
     */
    public String getExecuteName() {
        return fileName + "_" + jobId.toString();
    }

    public boolean loadJobFromFile() {
        DataInputStream dis;

        try {
            dis = new DataInputStream(new FileInputStream(fileName));

            jobSize = dis.read(binaryCode);
            if(jobSize.equals(MAX_JOB_SIZE)) {
                System.err.println("Job too large! Exceeds 64k");
                dis.close();
                return false;
            }
            dis.close();
            loadedToMemory  = true;
            return true;
        } catch (FileNotFoundException ex) {
            logger.error("Couldn't find job file");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    public boolean isLoaded() {
        synchronized (this) {
            return loadedToMemory;
        }
    }


    public boolean saveJobToFile() {
        if(!loadedToMemory) {
            System.out.println("Job has not been loaded to memory yet");
            return false;
        }

        File file = new File(getExecuteName());
        DataOutputStream dos;
        try {
            dos = new DataOutputStream(new FileOutputStream(file));
            dos.write(binaryCode, 0, jobSize);
            dos.close();

            if(!file.setExecutable(true)) {
                System.err.println("Setting executing permission for job file failed");
                return false;
            }
            return true;
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    public String getID () {
        return jobId.toString();
    }

    public Integer getSize() {
        return jobSize;
    }

    public boolean hasNotified() {
        return hasNotified.get();
    }

    public void setAsNotified() {
        hasNotified.set(true);
    }

    public abstract String toString();

    public abstract void run();

    public abstract boolean isFinished();

    public abstract void stop();

    public abstract void resume();

    public abstract JobResult getResult();
}
